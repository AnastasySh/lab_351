/*
Строки и файлы
строки старого С-типа представляют из себя всего лишь массив
символов с нулевым окончанием:
char cstr1[] = "C-style string1";
char cstr2[] = { 'C', '-', 's', 't', 'y', 'l', 'e', ' ', 's', 't', 'r', 'i', 'n', 'g', '1', '\0' };
char cstr3[] = {'\67', '\0'};
std::string cppstr1 = "C++ - style string 1";
std::string cppstr2 = "";

 в типе char на самом деле хранится знаковое целое число. Можно
 складывать делить умножать char
 Чтобы придать смысл данным, хранимым в char, нужна таблица
 соответствия чисел с символами - кодовая таблица (ASCII, ANSI, UNICODE)
 ФУНКЦИИ ДЛЯ РАБОТЫ С С-СТРОКАМИ
 вывод на печать printf(char[], , ,) или printf(* char, ...) -
 print formatted
 с помощью printf можно не просто печатать готовую строку, но и
 подставлять в неё другие переменные, попутно преобразовывая их
 в символьный вид и применяя форматирование
 форматирование printf("базовая %s строка %f, параметр1, параметр2)
 позиции, куда будут подставляться параметры, обозначаетются в
 базовой строке символом %
 значение символов форматирования берётся из таюблицы справки к
 функции http://www.cplusplus.com/reference/cstdio/printf/
 значения некоторых из них:
 %f - параметр подставляется на место %f, оформленное в виде числа с
 плавающей точкой
 %s - параметр подставляется на место %s, как строка
 %d - параметр подставляется на место %d, как целое число
 %e - параметр подставляется на место %e как число в
 экспоненциальном виде
 объединение (конкатенация) строк strcat(char*, char*)
 копирование из одной строки в другую strcpy()
 сравнение strcmp()
 длина строки strlen()
 вставка строки в подстроку производится в несколько действий
 в стандартной библиотеке C++ массив символови инкапсулирован в
 класс std::string
 в который так же собраны самые часто используемые методы обработки
 и для которого перегружены операторы + (конкатенация), ввод, вывод, ==,
 = и т.д.
 ещё одно отличие от строк С - длина строки теперь задаётся определенным
 числом, а не нклевым окончанием
 Цикл работы с файлом заключается в
 0.1 Проверить существует ли файл (в случае если нужно)
 0.2 При работу в C++ создать объект для работы с файлом
 1.Открытие файла
 2.Работа с файлом (чтение, запись, поиск)
 3.Закрытие файла
 */

#include "pch.h"
#include <iostream>

int main()
{
    std::cout << "Hello World!\n"; 
}

